npm命令
npm help 查看npm命令列表
npm -l 查看各个命令的简单用法
npm -v 查看npm的版本
npm config list -l 查看npm的配置
npm init
npm init 从来初始化生成一个新的package.json文件。它会向用户提问一系列问题，如果你觉得不用修改默认配置，一路回车就可以了
如果使用了 -f (代表force)、-y(代表yes)，则跳过提问阶段，直接生成一个新的package.json文件
npm set
npm set用来设置环境变量
npm set init-author-name 'your name'
npm set init-author-email 'your email'
npm set init-author-url 'http://yourdomain.com'
npm set init-license 'MIT'
这些命令等于 npm init设置啦默认值，以后执行npm init的时候，packge.json的作者姓名、邮件、主页、许可证字段就会自动写入
预设的值。这些信息会存放在用户主目录的~/.npmrc文件，是的用户不用每个项目都输入。如果某个项目有不同的设置，可以针对该项目
运行nom config
npm set save-exact true 该命令设置加入模块时，package.json讲记录模块的确切版本，而不是一个可选的版本范围
npm config
npm config set prefix $dir 该命令将指定的$dir目录，设为模块的全局安装目录。如果当前有这个目录的写权限，那么运行 npm install的时候，就不用sudo命令授权了
npm config set save-prefix ~ 该命令使得npm install --save 和npm install --save-dev安装新模块时，允许的版本范围从克拉符号（^)改成波浪号(~),即从允许小版本升级
变成只允许补丁包的升级
npm config set init.author.name $name
npm config set init.author.email $email
上面的命令指定使用npm init时 生成的packge.json文件的字段默认值
npm info 命令可以查看每个模块的具体信息
npm search 命令用于搜索仓库，它后面可以跟字符串，也可以跟正则表达式
npm list命令以树形结构列出当前项目安装的所有模块，以及他们依赖的模块 加上-global参数，会列出全局安装的模块 也可以列出单个模块
npm install 
node模块采用npm install命令安装
每个模块可以"全局安装"，也可以"本地安装"。全局安装指的是将一个模块安装到系统目录中，各个项目都可以调用。一般来说，全局安装只适用于
工具模块，比如eslint和gulp。"本地安装"指的是将一个模块下载到当前项目的node_modules子目录，然后只有在项目目录这之中，才能调用这个模块
本地安装 npm install <package name>
全局安装 sudo npm install -global <package name> sudo npm install -g <package name>
npm install 也支持直接输入GitHub代码库地址
安装之前，npm install会先检查，node_modules目录之中是否已经存在指定模块。如果存在，就不在重新安装了，即使远程仓库已经有了一个新版本，也是如此
如果你希望，一个模块不管是否安装过，npm都要强制重新安装，可以使用-f或--force参数  npm install <packageName> --force
如果你希望，所有模块都要强制重新安装，那就删除node_modules目录，重新执行npm install rm -rf node_modules npm install
安装不同版本
install命令总是安装模块的最新版本，如果要安装模块的特定版本，可以在模块名后面加上@和版本号
eg：npm install sax@latest
	npm install sax@0.1.1
	npm install sax@">=0.1.0 <0.2.0"
如果使用 --save-exact参数，会在package.json文件制定安装模块的确切版本
	npm install readable-stream --save --save-exact
	install命令可以使用不同参数，制定所安装的模块属于哪一种性质的依赖关系
	即出现在packages.json文件的那一项中
	--save:某块明江北天津爱到dependencies，可以简化为参数-S
	--save-dev：模块名将添加到devDependencies，可以简化为参数-D
	npm install默认会安装dependencies字段和devDependencies字段中的所有模块，如果使用--production参数，可以只安装dependencies字段的模块

避免系统权限
默认情况下，npm全局模块都安装在胸目录(比如/usr/local/lib/)，普通用户没有写入权限，需要用到sudo命令。这不是很方便，我们可以在没有root权限的
情况下，安装全局模块
首先，在主目录下新建配置文件.npmrc，然后在该文件中将prefix变量定义到主目录下面
prefix = /home/yourUsername/npm
然后在主目录下新建npm子目录
mkdir ~/npm
此后，全局安装的模块都会安装在这个子目录中，npm也会到~/npm/bin目录去寻找命令。
最后，将这个.bash_profile文件(或.bashrc文件)中加入PATH变量
export PATH =~/NPM/BIN:$PATH
npm update npm uninstall
npm update命令可以更新本地安装的模块
npm update [package name]升级当前项目的指定模块
npm update -global [package name]升级全局安装的模块
他会先到远程仓库查询最新的版本，然后查询本地版本。如果本地版本不存在，或者远程版本较新，就会安装
使用-S 或 --save参数，可以在安装的时候更新package.json里面模块的版本号
注意，从npm v2.6.1开始，npm update 值更新顶层模块，而不更新依赖的依赖，以前版本是递归更新的如果想要取道老版本的效果，要使用下面的命令
npm --depth 9999 update
npm uninstall[package name]命令，卸载已安装的模块
npm uninstall [package name]
npm run
npm不进可以用于模块管理，还可以用于执行脚本。package.json文件有一个scripts字段，可以用于指定脚本命令，供npm直接调用





//  "babel-core": "^6.26.0",
//  "babel-eslint": "^8.2.1",
//  "babel-helper-vue-jsx-merge-props": "^2.0.3",
//  "babel-loader": "^7.1.2",
//  "babel-plugin-syntax-dynamic-import": "^6.18.0",
//  "babel-plugin-syntax-jsx": "^6.18.0",
//  "babel-plugin-transform-vue-jsx": "^3.5.0",
//  "babel-preset-env": "^1.6.1",
//  "babel-preset-stage-1": "^6.24.1",
//  "cross-env": "^5.1.3",
//  "css-loader": "^0.28.7",
//  "file-loader": "^1.1.6",
//  "html-webpack-plugin": "^2.30.1",
//  "style-loader": "^0.19.1",
//  "stylus": "^0.54.5",
//  "stylus-loader": "^3.0.1",
//  "url-loader": "^0.6.2",
//  "vue": "^2.5.13",
//  "vue-loader": "^13.6.0",
//  "vue-template-compiler": "^2.5.13",
//  "webpack": "^3.10.0",
//  "webpack-dev-server": "^2.9.7"














